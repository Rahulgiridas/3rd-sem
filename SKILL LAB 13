#include <stdio.h>
#include <stdlib.h>
int nextPowerOf2(int n)
{
    int count = 0;  
    if (n && !(n & (n - 1)))
        return n;
    while (n != 0)
{
        count++;
        n >>= 1;
    }
    return (1 << count);
}
void constructSegmentTree(int arr[], int segmentTree[], int low, int high, int pos) {
    if (low == high)
{
        segmentTree[pos] = arr[low];
        return;
    }
    int mid = (low + high) / 2; 
    constructSegmentTree(arr, segmentTree, low, mid, 2 * pos + 1);
    constructSegmentTree(arr, segmentTree, mid + 1, high, 2 * pos + 2);   
    segmentTree[pos] = segmentTree[2 * pos + 1] + segmentTree[2 * pos + 2];
}
void printSegmentTree(int segmentTree[], int n)
{
    printf("Constructed Segment Tree:\n");
    for (int i = 0; i < n; i++)
{
        printf("%d ", segmentTree[i]);
    }
    printf("\n");
}
int main()
{
    int arr[] = {3, 4, 1, 5, 8, 6, 7, 9};
    int n = sizeof(arr) / sizeof(arr[0]);
    int treeSize = nextPowerOf2(n) * 2 - 1;
    int* segmentTree = (int*)calloc(treeSize, sizeof(int));   
    constructSegmentTree(arr, segmentTree, 0, n - 1, 0);
    printSegmentTree(segmentTree, treeSize);
    free(segmentTree);
    return 0;
}
