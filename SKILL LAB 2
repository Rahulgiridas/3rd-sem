#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100
struct Queue
{
    int items[MAX_SIZE];
    int front;
    int rear;
};
void initializeQueue(struct Queue* queue)
{
    queue->front = -1;
    queue->rear = -1;
}
int isEmpty(struct Queue* queue) 
{
    return queue->front == -1;
}
int isFull(struct Queue* queue)
{
    return (queue->rear + 1) % MAX_SIZE == queue->front;
}
void enqueue(struct Queue* queue, int item)
{
    if (isFull(queue))
{
        printf("Queue is full. Cannot enqueue more items.\n");
        return;
    }
    if (isEmpty(queue))
{
        queue->front = 0;
    }
    queue->rear = (queue->rear + 1) % MAX_SIZE;
    queue->items[queue->rear] = item;
    printf("Print job enqueued: %d\n", item);
}
int dequeue(struct Queue* queue) 
{
    if (isEmpty(queue)
) {
        printf("Queue is empty. Cannot dequeue from an empty queue.\n");
        return -1; 
    }
    int removedItem = queue->items[queue->front];
    if (queue->front == queue->rear)
{
        queue->front = -1;
        queue->rear = -1;
    }
else 
{
        queue->front = (queue->front + 1) % MAX_SIZE;
    }
    printf("Print job dequeued: %d\n", removedItem);
    return removedItem;
}
int main() 
{
    struct Queue printerQueue;
    initializeQueue(&printerQueue);
    enqueue(&printerQueue, 101);
    enqueue(&printerQueue, 102);
    enqueue(&printerQueue, 103);
    dequeue(&printerQueue); 
    dequeue(&printerQueue); 
    dequeue(&printerQueue);
    dequeue(&printerQueue); 
    return 0;
}
