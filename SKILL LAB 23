#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Binary tree node structure
typedef struct TreeNode {
    int data;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

// Function prototypes
bool areIdentical(TreeNode*root1,TreeNode*root2);
TreeNode* createNode(int data);
void freeTree(TreeNode *root);

int main() {
    // Create two binary trees
    TreeNode *root1 = createNode(1);
    root1->left = createNode(2);
    root1->right = createNode(3);

    TreeNode *root2 = createNode(1);
    root2->left = createNode(2);
    root2->right = createNode(3);

    // Check if trees are identical
    if (areIdentical(root1, root2)) {
        printf("The binary trees are identical.\n");
    } else {
        printf("The binary trees are not identical.\n");
    }

    // Free memory allocated for trees
    freeTree(root1);
    freeTree(root2);

    return 0;
}

// Function to check if two binary trees are identical
bool areIdentical(TreeNode *root1, TreeNode *root2) {
    // Base cases: if both trees are empty, they are identical
    if (root1 == NULL && root2 == NULL) {
        return true;
    }
    // If one tree is empty and the other is not, they are not identical
    if (root1 == NULL || root2 == NULL) {
        return false;
    }
    // Check if the data of the current nodes is equal and recursively check their left and right subtrees
    return (root1->data == root2->data &&
            areIdentical(root1->left, root2->left) &&
            areIdentical(root1->right, root2->right));
}

// Function to create a new tree node
TreeNode* createNode(int data) {
    TreeNode *newNode = (TreeNode*)malloc(sizeof(TreeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to free memory allocated for a binary tree
void freeTree(TreeNode *root) {
    if (root == NULL) {
        return;
    }
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}